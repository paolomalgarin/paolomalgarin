<svg
    width="1600"
    height="900"
    viewBox="0 0 1600 900"
    xmlns="http://www.w3.org/2000/svg">

  <!-- =============================
       1) Definizioni: gradienti, filtri e forma dei pesci
       ============================= -->
  <defs>
    <!-- Gradiente di sfondo -->
    <linearGradient id="bgGrad" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stop-color="#8bd3dd"/>
      <stop offset="100%" stop-color="#2b8dad"/>
    </linearGradient>

    <!-- Gradiente per il testo -->
    <radialGradient id="textGrad" cx="50%" cy="50%" r="80%">
      <stop offset="0%" stop-color="#ffffff"/>
      <stop offset="100%" stop-color="#cceeff"/>
    </radialGradient>

    <!-- Filtro di distorsione per effetto onde sul testo -->
    <filter id="textFilter">
      <feTurbulence 
        id="turbulence" 
        type="fractalNoise" 
        baseFrequency="0.02" 
        numOctaves="2"
        seed="2"
        result="noise"/>
      <feDisplacementMap 
        in="SourceGraphic" 
        in2="noise" 
        scale="20" 
        xChannelSelector="R" 
        yChannelSelector="G"
        result="distortedText"/>
    </filter>

    <!-- Forma di pesce stilizzata, di default rivolta a sinistra -->
    <g id="fishShape">
      <ellipse cx="0" cy="0" rx="12" ry="6"/>
      <polygon points="12,0 20,5 20,-5"/>
    </g>
  </defs>

  <!-- =============================
       2) Sfondo mare
       ============================= -->
  <rect x="0" y="0" width="100%" height="100%" fill="url(#bgGrad)"/>

  <!-- =============================
       3) Testo "PAOLO" 
           - Le lettere sono posizionate in modo da coprire 1280px (80% della larghezza)
           - Il gruppo Ã¨ centrato orizzontalmente (offset 160px)
       ============================= -->
  <g 
    id="textGroup"
    transform="translate(160,450)"
    fill="url(#textGrad)"
    font-family="Arial, sans-serif"
    font-size="300"
    filter="url(#textFilter)"
    opacity="0.9"
    text-anchor="middle"
  >
    <text id="letterP" x="0"   y="0">P</text>
    <text id="letterA" x="320" y="0">A</text>
    <text id="letterO1" x="640" y="0">O</text>
    <text id="letterL" x="960" y="0">L</text>
    <text id="letterO2" x="1280" y="0">O</text>
  </g>

  <!-- =============================
       4) Contenitori per bolle e pesci
       ============================= -->
  <g id="bubbles"></g>
  <g id="fishes"></g>

  <!-- =============================
       5) Script JavaScript per animazioni
       ============================= -->
  <script><![CDATA[
    // Riferimenti alle lettere
    const letterP  = document.getElementById("letterP");
    const letterA  = document.getElementById("letterA");
    const letterO1 = document.getElementById("letterO1");
    const letterL  = document.getElementById("letterL");
    const letterO2 = document.getElementById("letterO2");

    const letters = [letterP, letterA, letterO1, letterL, letterO2];
    const bubblesContainer = document.getElementById("bubbles");
    const fishesContainer  = document.getElementById("fishes");

    let fishArray = [];
    for(let i=0; i<6; i++){
      createFish();
    }

    let time = 0;
    function animate() {
      time += 0.02;

      // Ogni lettera oscilla indipendentemente
      letters.forEach((letter, index) => {
        const offsetY = 10 * Math.sin(time + index);
        const offsetX = 5  * Math.cos(time + index * 0.5);
        letter.setAttribute("transform", `translate(${offsetX}, ${offsetY})`);
      });

      // Creazione e aggiornamento delle bolle
      if (Math.random() < 0.02) {
        createBubble();
      }
      updateBubbles();

      // Aggiornamento della posizione dei pesci
      updateFishes();

      requestAnimationFrame(animate);
    }

    /***********************
     * BOLLE D'ARIA
     ***********************/
    function createBubble() {
      const bubble = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      const startX = Math.random() * 1600;
      const size   = Math.random() * 6 + 2;

      bubble.setAttribute("cx", startX);
      bubble.setAttribute("cy", 900);
      bubble.setAttribute("r",  size);
      bubble.setAttribute("fill", "rgba(255,255,255,0.5)");
      bubble.setAttribute("opacity", "0.8");

      bubble.dataset.x = startX;
      bubble.dataset.y = 900;
      bubble.dataset.speed = 1 + Math.random() * 1.5;

      bubblesContainer.appendChild(bubble);
    }

    function updateBubbles() {
      const bubbles = bubblesContainer.querySelectorAll("circle");
      bubbles.forEach(bubble => {
        let x = parseFloat(bubble.dataset.x);
        let y = parseFloat(bubble.dataset.y);
        const speed = parseFloat(bubble.dataset.speed);

        y -= speed;
        x += Math.sin(y * 0.02) * 0.5;

        bubble.dataset.x = x;
        bubble.dataset.y = y;
        bubble.setAttribute("cx", x);
        bubble.setAttribute("cy", y);

        if (y < -50) {
          bubble.remove();
        }
      });
    }

    /***********************
     * PESCI
     ***********************/
    function createFish() {
      const fish = document.createElementNS("http://www.w3.org/2000/svg", "use");
      fish.setAttribute("href", "#fishShape");

      let side = (Math.random() < 0.5) ? "left" : "right";
      let startX = (side === "left") ? -60 : 1660;
      let startY = Math.random() * 700 + 100;

      fish.dataset.x = startX;
      fish.dataset.y = startY;

      let vx = (side === "left") ? (1 + Math.random() * 2) : -(1 + Math.random() * 2);
      let vy = (Math.random() - 0.5) * 0.5;
      fish.dataset.vx = vx;
      fish.dataset.vy = vy;

      const colors = ["orange", "gold", "lightgreen", "pink", "lightblue"];
      fish.setAttribute("fill", colors[Math.floor(Math.random() * colors.length)]);
      fish.setAttribute("opacity", "0.85");

      fishesContainer.appendChild(fish);
      fishArray.push(fish);
    }

    function updateFishes() {
      fishArray.forEach((fish) => {
        let x  = parseFloat(fish.dataset.x);
        let y  = parseFloat(fish.dataset.y);
        let vx = parseFloat(fish.dataset.vx);
        let vy = parseFloat(fish.dataset.vy);

        x += vx;
        y += vy;

        if (x < -100 || x > 1700) {
          x = (vx > 0) ? -60 : 1660;
          y = Math.random() * 700 + 100;
        }

        fish.dataset.x = x;
        fish.dataset.y = y;
        let angle = (vx > 0) ? 180 : 0;
        fish.setAttribute("transform", `translate(${x},${y}) rotate(${angle})`);
      });
    }

    animate();
  ]]></script>
</svg>
